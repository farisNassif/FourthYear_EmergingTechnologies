// This file is referenced in the HTML files and called in order for the canvas to be drawn on and display
// Adapted from https://www.jitsejan.com/python-and-javascript-in-flask.html

$( document ).ready(function() {
  
  // Canvas creation method, creates canvas object
  function createCanvas(parent, width, height) {
    // Ref to canvasBorder within styles.css
    var canvas = document.getElementById("canvas");
    canvas.context = canvas.getContext('2d');
    return canvas;
  }
  // Main drawing function
  function init(container, width, height, fillColor) {
    var canvas = createCanvas(container, width, height);
    var ctx = canvas.context;
    // Draw Circle, called when mouse is moving
    ctx.fillCircle = function(x, y, radius, fillColor) {
      this.fillStyle = fillColor;
      this.beginPath();
      this.moveTo(x, y);
      this.arc(x, y, radius, 0, Math.PI * 2, false);
      this.fill();
    };
    
    // While the mouse is pressed down and moving, draw, otherwise return
    canvas.onmousemove = function(e) {
      if (!canvas.isDrawing) {
        return;
      }
      // Co-ordinate values for drawing
      var x = e.pageX - this.offsetLeft;
      var y = e.pageY - this.offsetTop;
      // Size of output generated by drawing
      var radius = 6.5;
      // Make it black
      var fillColor = 'rgb(0,0,0)';
      ctx.fillCircle(x, y, radius, fillColor);
    };
    // The two methods below are controllers, knowing when to draw and when to stop
    canvas.onmousedown = function(e) {
      canvas.isDrawing = true;
    };
    canvas.onmouseup = function(e) {
      canvas.isDrawing = false;
    };
  } 
  
  // Initializing the canvas so it may be passed to the initialization function 
  var container = document.getElementById('canvas');
  init(container, 200, 200, '#ddd');

  // Clear the canvas, given the paramaters of the drawable area
  function clearCanvas() {
    var canvas = document.getElementById("canvas");
    var ctx = canvas.getContext("2d");
        ctx.clearRect(0, 0, canvas.width, canvas.height);
  }
  // Binding for the ClearButton in index.html
  $( "#clearButton" ).click(function(){
    clearCanvas();
  });

  $( "#publishButton" ).click(function(){
    //console.log("number published!");
    var dataURL = canvas.toDataURL();
    //var image = canvas.toDataURL("image/png").replace("image/png", "image/octet-stream");  // here is the most important part because if you dont replace you will get a DOM 18 exception.
    //var link = document.getElementById('link');
    //link.setAttribute('download', 'MintyPaper.png');
    //link.setAttribute('href', canvas.toDataURL("image/png").replace("image/png", "image/octet-stream"));
    //link.click();
    //window.location.href=image; // it will save locally
    canvas.resizeAndExport = function(width, height){
      // create a new canvas
      var c = document.createElement('canvas');
      // set its width&height to the required ones
      c.width = width;
      c.height = height;
      // draw our canvas to the new one
      c.getContext('2d').drawImage(this, 0,0,32, 32, 0,0,width, height);
      // return the resized canvas dataURL
      return c.toDataURL();
      }
    // create an image that will get our resized export as src
    var img = new Image();
    img.src = canvas.resizeAndExport(28, 28);
    document.body.appendChild(img);
    img = canvas.toDataURL("image/png").replace("image/png", "image/octet-stream");  
    var link = document.getElementById('link');
    link.setAttribute('download', 'NumberDrawn.png');
    link.setAttribute('href', canvas.toDataURL("image/png").replace("image/png", "image/octet-stream"));
    link.click();
    console.log(dataURL);
  });
});